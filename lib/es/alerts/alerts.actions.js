function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable class-methods-use-this */
import uuidv1 from 'uuid/v1';

export var TYPES = {
  PLATFORM_ALERTS_SHOW: 'PLATFORM_ALERTS_SHOW',
  PLATFORM_ALERTS_DISMISS_ALERT: 'PLATFORM_ALERTS_DISMISS_ALERT',
  PLATFORM_ALERTS_DISMISS_ALL: 'PLATFORM_ALERTS_DISMISS_ALL'
};

var DEFAULT_TIMEOUT = 3000;

var getId = function getId() {
  return uuidv1();
};

var OCAlertComponent = function OCAlertComponent() {
  var _this = this;

  _classCallCheck(this, OCAlertComponent);

  this.setStore = function (store) {
    _this.store = store;
  };

  this.alertSuccess = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var id = getId();
    var opts = Object.assign({}, { timeOut: DEFAULT_TIMEOUT }, options);
    _this.showAlert(id, 'success', message, opts);
    return id;
  };

  this.alertInfo = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var id = getId();
    var opts = Object.assign({}, { timeOut: DEFAULT_TIMEOUT }, options);
    _this.showAlert(id, 'info', message, opts);
    return id;
  };

  this.alertWarning = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var id = getId();
    var opts = Object.assign({}, options);
    _this.showAlert(id, 'warning', message, opts);
    return id;
  };

  this.alertError = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var id = getId();
    var opts = Object.assign({}, options);
    _this.showAlert(id, 'danger', message, opts);
    return id;
  };

  this.closeAlert = function (id) {
    _this.store.dispatch({
      id: id,
      type: TYPES.PLATFORM_ALERTS_DISMISS_ALERT
    });
  };

  this.closeAlerts = function () {
    _this.store.dispatch({
      type: TYPES.PLATFORM_ALERTS_DISMISS_ALL
    });
  };

  this.showAlert = function (id, type, message, options) {
    _this.store.dispatch({
      id: id,
      type: TYPES.PLATFORM_ALERTS_SHOW,
      alertType: type,
      message: message
    });
    if (options.timeOut) {
      setTimeout(function () {
        return _this.closeAlert(id);
      }, options.timeOut);
    }
  };

  this.store = undefined;
};

export var OCAlert = new OCAlertComponent();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbGVydHMvYWxlcnRzLmFjdGlvbnMuanMiXSwibmFtZXMiOlsidXVpZHYxIiwiVFlQRVMiLCJQTEFURk9STV9BTEVSVFNfU0hPVyIsIlBMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJUIiwiUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxMIiwiREVGQVVMVF9USU1FT1VUIiwiZ2V0SWQiLCJPQ0FsZXJ0Q29tcG9uZW50Iiwic2V0U3RvcmUiLCJzdG9yZSIsImFsZXJ0U3VjY2VzcyIsIm1lc3NhZ2UiLCJvcHRpb25zIiwiaWQiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGltZU91dCIsInNob3dBbGVydCIsImFsZXJ0SW5mbyIsImFsZXJ0V2FybmluZyIsImFsZXJ0RXJyb3IiLCJjbG9zZUFsZXJ0IiwiZGlzcGF0Y2giLCJ0eXBlIiwiY2xvc2VBbGVydHMiLCJhbGVydFR5cGUiLCJzZXRUaW1lb3V0IiwidW5kZWZpbmVkIiwiT0NBbGVydCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLE9BQU9BLE1BQVAsTUFBbUIsU0FBbkI7O0FBRUEsT0FBTyxJQUFNQyxRQUFRO0FBQ25CQyx3QkFBc0Isc0JBREg7QUFFbkJDLGlDQUErQiwrQkFGWjtBQUduQkMsK0JBQTZCO0FBSFYsQ0FBZDs7QUFNUCxJQUFNQyxrQkFBa0IsSUFBeEI7O0FBRUEsSUFBTUMsUUFBUSxTQUFSQSxLQUFRO0FBQUEsU0FBTU4sUUFBTjtBQUFBLENBQWQ7O0lBRU1PLGdCLEdBQ0osNEJBQWM7QUFBQTs7QUFBQTs7QUFBQSxPQUlkQyxRQUpjLEdBSUgsVUFBQ0MsS0FBRCxFQUFXO0FBQ3BCLFVBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNELEdBTmE7O0FBQUEsT0FRZEMsWUFSYyxHQVFDLFVBQUNDLE9BQUQsRUFBMkI7QUFBQSxRQUFqQkMsT0FBaUIsdUVBQVAsRUFBTzs7QUFDeEMsUUFBTUMsS0FBS1AsT0FBWDtBQUNBLFFBQU1RLE9BQU9DLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEVBQUVDLFNBQVNaLGVBQVgsRUFBbEIsRUFBZ0RPLE9BQWhELENBQWI7QUFDQSxVQUFLTSxTQUFMLENBQWVMLEVBQWYsRUFBbUIsU0FBbkIsRUFBOEJGLE9BQTlCLEVBQXVDRyxJQUF2QztBQUNBLFdBQU9ELEVBQVA7QUFDRCxHQWJhOztBQUFBLE9BZWRNLFNBZmMsR0FlRixVQUFDUixPQUFELEVBQTJCO0FBQUEsUUFBakJDLE9BQWlCLHVFQUFQLEVBQU87O0FBQ3JDLFFBQU1DLEtBQUtQLE9BQVg7QUFDQSxRQUFNUSxPQUFPQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQixFQUFFQyxTQUFTWixlQUFYLEVBQWxCLEVBQWdETyxPQUFoRCxDQUFiO0FBQ0EsVUFBS00sU0FBTCxDQUFlTCxFQUFmLEVBQW1CLE1BQW5CLEVBQTJCRixPQUEzQixFQUFvQ0csSUFBcEM7QUFDQSxXQUFPRCxFQUFQO0FBQ0QsR0FwQmE7O0FBQUEsT0FzQmRPLFlBdEJjLEdBc0JDLFVBQUNULE9BQUQsRUFBMkI7QUFBQSxRQUFqQkMsT0FBaUIsdUVBQVAsRUFBTzs7QUFDeEMsUUFBTUMsS0FBS1AsT0FBWDtBQUNBLFFBQU1RLE9BQU9DLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSixPQUFsQixDQUFiO0FBQ0EsVUFBS00sU0FBTCxDQUFlTCxFQUFmLEVBQW1CLFNBQW5CLEVBQThCRixPQUE5QixFQUF1Q0csSUFBdkM7QUFDQSxXQUFPRCxFQUFQO0FBQ0QsR0EzQmE7O0FBQUEsT0E2QmRRLFVBN0JjLEdBNkJELFVBQUNWLE9BQUQsRUFBMkI7QUFBQSxRQUFqQkMsT0FBaUIsdUVBQVAsRUFBTzs7QUFDdEMsUUFBTUMsS0FBS1AsT0FBWDtBQUNBLFFBQU1RLE9BQU9DLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSixPQUFsQixDQUFiO0FBQ0EsVUFBS00sU0FBTCxDQUFlTCxFQUFmLEVBQW1CLFFBQW5CLEVBQTZCRixPQUE3QixFQUFzQ0csSUFBdEM7QUFDQSxXQUFPRCxFQUFQO0FBQ0QsR0FsQ2E7O0FBQUEsT0FvQ2RTLFVBcENjLEdBb0NELFVBQUNULEVBQUQsRUFBUTtBQUNuQixVQUFLSixLQUFMLENBQVdjLFFBQVgsQ0FBb0I7QUFDbEJWLFlBRGtCO0FBRWxCVyxZQUFNdkIsTUFBTUU7QUFGTSxLQUFwQjtBQUlELEdBekNhOztBQUFBLE9BMkNkc0IsV0EzQ2MsR0EyQ0EsWUFBTTtBQUNsQixVQUFLaEIsS0FBTCxDQUFXYyxRQUFYLENBQW9CO0FBQ2xCQyxZQUFNdkIsTUFBTUc7QUFETSxLQUFwQjtBQUdELEdBL0NhOztBQUFBLE9BaURkYyxTQWpEYyxHQWlERixVQUFDTCxFQUFELEVBQUtXLElBQUwsRUFBV2IsT0FBWCxFQUFvQkMsT0FBcEIsRUFBZ0M7QUFDMUMsVUFBS0gsS0FBTCxDQUFXYyxRQUFYLENBQW9CO0FBQ2xCVixZQURrQjtBQUVsQlcsWUFBTXZCLE1BQU1DLG9CQUZNO0FBR2xCd0IsaUJBQVdGLElBSE87QUFJbEJiO0FBSmtCLEtBQXBCO0FBTUEsUUFBSUMsUUFBUUssT0FBWixFQUFxQjtBQUNuQlUsaUJBQVc7QUFBQSxlQUFNLE1BQUtMLFVBQUwsQ0FBZ0JULEVBQWhCLENBQU47QUFBQSxPQUFYLEVBQXNDRCxRQUFRSyxPQUE5QztBQUNEO0FBQ0YsR0EzRGE7O0FBQ1osT0FBS1IsS0FBTCxHQUFhbUIsU0FBYjtBQUNELEM7O0FBNERILE9BQU8sSUFBTUMsVUFBVSxJQUFJdEIsZ0JBQUosRUFBaEIiLCJmaWxlIjoiYWxlcnRzLmFjdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG5pbXBvcnQgdXVpZHYxIGZyb20gJ3V1aWQvdjEnO1xuXG5leHBvcnQgY29uc3QgVFlQRVMgPSB7XG4gIFBMQVRGT1JNX0FMRVJUU19TSE9XOiAnUExBVEZPUk1fQUxFUlRTX1NIT1cnLFxuICBQTEFURk9STV9BTEVSVFNfRElTTUlTU19BTEVSVDogJ1BMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJUJyxcbiAgUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxMOiAnUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxMJyxcbn07XG5cbmNvbnN0IERFRkFVTFRfVElNRU9VVCA9IDMwMDA7XG5cbmNvbnN0IGdldElkID0gKCkgPT4gdXVpZHYxKCk7XG5cbmNsYXNzIE9DQWxlcnRDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0b3JlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0U3RvcmUgPSAoc3RvcmUpID0+IHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gIH07XG5cbiAgYWxlcnRTdWNjZXNzID0gKG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGlkID0gZ2V0SWQoKTtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgeyB0aW1lT3V0OiBERUZBVUxUX1RJTUVPVVQgfSwgb3B0aW9ucyk7XG4gICAgdGhpcy5zaG93QWxlcnQoaWQsICdzdWNjZXNzJywgbWVzc2FnZSwgb3B0cyk7XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIGFsZXJ0SW5mbyA9IChtZXNzYWdlLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBpZCA9IGdldElkKCk7XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHsgdGltZU91dDogREVGQVVMVF9USU1FT1VUIH0sIG9wdGlvbnMpO1xuICAgIHRoaXMuc2hvd0FsZXJ0KGlkLCAnaW5mbycsIG1lc3NhZ2UsIG9wdHMpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBhbGVydFdhcm5pbmcgPSAobWVzc2FnZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZCgpO1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICB0aGlzLnNob3dBbGVydChpZCwgJ3dhcm5pbmcnLCBtZXNzYWdlLCBvcHRzKTtcbiAgICByZXR1cm4gaWQ7XG4gIH07XG5cbiAgYWxlcnRFcnJvciA9IChtZXNzYWdlLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBpZCA9IGdldElkKCk7XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgIHRoaXMuc2hvd0FsZXJ0KGlkLCAnZGFuZ2VyJywgbWVzc2FnZSwgb3B0cyk7XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIGNsb3NlQWxlcnQgPSAoaWQpID0+IHtcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIGlkLFxuICAgICAgdHlwZTogVFlQRVMuUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxFUlQsXG4gICAgfSk7XG4gIH07XG5cbiAgY2xvc2VBbGVydHMgPSAoKSA9PiB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiBUWVBFUy5QTEFURk9STV9BTEVSVFNfRElTTUlTU19BTEwsXG4gICAgfSk7XG4gIH07XG5cbiAgc2hvd0FsZXJ0ID0gKGlkLCB0eXBlLCBtZXNzYWdlLCBvcHRpb25zKSA9PiB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7XG4gICAgICBpZCxcbiAgICAgIHR5cGU6IFRZUEVTLlBMQVRGT1JNX0FMRVJUU19TSE9XLFxuICAgICAgYWxlcnRUeXBlOiB0eXBlLFxuICAgICAgbWVzc2FnZSxcbiAgICB9KTtcbiAgICBpZiAob3B0aW9ucy50aW1lT3V0KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2xvc2VBbGVydChpZCksIG9wdGlvbnMudGltZU91dCk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgT0NBbGVydCA9IG5ldyBPQ0FsZXJ0Q29tcG9uZW50KCk7XG4iXX0=