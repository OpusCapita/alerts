'use strict';

exports.__esModule = true;
exports.OCAlert = exports.TYPES = undefined;

var _v = require('uuid/v1');

var _v2 = _interopRequireDefault(_v);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /* eslint-disable class-methods-use-this */


var TYPES = exports.TYPES = {
  PLATFORM_ALERTS_SHOW: 'PLATFORM_ALERTS_SHOW',
  PLATFORM_ALERTS_DISMISS_ALERT: 'PLATFORM_ALERTS_DISMISS_ALERT',
  PLATFORM_ALERTS_DISMISS_ALL: 'PLATFORM_ALERTS_DISMISS_ALL'
};

var DEFAULT_TIMEOUT = 3000;

var getId = function getId() {
  return (0, _v2.default)();
};

var OCAlertComponent = function OCAlertComponent() {
  var _this = this;

  _classCallCheck(this, OCAlertComponent);

  this.setStore = function (store) {
    _this.store = store;
  };

  this.alertSuccess = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, { timeOut: DEFAULT_TIMEOUT }, options);
    _this.showAlert(id, 'success', message, opts, onDismiss);
    return id;
  };

  this.alertInfo = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, { timeOut: DEFAULT_TIMEOUT }, options);
    _this.showAlert(id, 'info', message, opts, onDismiss);
    return id;
  };

  this.alertWarning = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, options);
    _this.showAlert(id, 'warning', message, opts, onDismiss);
    return id;
  };

  this.alertError = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, options);
    _this.showAlert(id, 'danger', message, opts, onDismiss);
    return id;
  };

  this.closeAlert = function (id) {
    _this.store.dispatch({
      id: id,
      type: TYPES.PLATFORM_ALERTS_DISMISS_ALERT
    });
  };

  this.closeAlerts = function () {
    _this.store.dispatch({
      type: TYPES.PLATFORM_ALERTS_DISMISS_ALL
    });
  };

  this.showAlert = function (id, type, message, options) {
    var onDismiss = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _this.store.dispatch({
      id: id,
      message: message,
      onDismiss: onDismiss,
      type: TYPES.PLATFORM_ALERTS_SHOW,
      alertType: type
    });
    if (options.timeOut) {
      setTimeout(function () {
        return _this.closeAlert(id);
      }, options.timeOut);
    }
  };

  this.store = undefined;
};

var OCAlert = exports.OCAlert = new OCAlertComponent();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbGVydHMvYWxlcnRzLmFjdGlvbnMuanMiXSwibmFtZXMiOlsiVFlQRVMiLCJQTEFURk9STV9BTEVSVFNfU0hPVyIsIlBMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJUIiwiUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxMIiwiREVGQVVMVF9USU1FT1VUIiwiZ2V0SWQiLCJPQ0FsZXJ0Q29tcG9uZW50Iiwic2V0U3RvcmUiLCJzdG9yZSIsImFsZXJ0U3VjY2VzcyIsIm1lc3NhZ2UiLCJvcHRpb25zIiwib25EaXNtaXNzIiwiaWQiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGltZU91dCIsInNob3dBbGVydCIsImFsZXJ0SW5mbyIsImFsZXJ0V2FybmluZyIsImFsZXJ0RXJyb3IiLCJjbG9zZUFsZXJ0IiwiZGlzcGF0Y2giLCJ0eXBlIiwiY2xvc2VBbGVydHMiLCJhbGVydFR5cGUiLCJzZXRUaW1lb3V0IiwidW5kZWZpbmVkIiwiT0NBbGVydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQTs7Ozs7OzBKQURBOzs7QUFHTyxJQUFNQSx3QkFBUTtBQUNuQkMsd0JBQXNCLHNCQURIO0FBRW5CQyxpQ0FBK0IsK0JBRlo7QUFHbkJDLCtCQUE2QjtBQUhWLENBQWQ7O0FBTVAsSUFBTUMsa0JBQWtCLElBQXhCOztBQUVBLElBQU1DLFFBQVEsU0FBUkEsS0FBUTtBQUFBLFNBQU0sa0JBQU47QUFBQSxDQUFkOztJQUVNQyxnQixHQUNKLDRCQUFjO0FBQUE7O0FBQUE7O0FBQUEsT0FJZEMsUUFKYyxHQUlILFVBQUNDLEtBQUQsRUFBVztBQUNwQixVQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDRCxHQU5hOztBQUFBLE9BUWRDLFlBUmMsR0FRQyxVQUFDQyxPQUFELEVBQTZDO0FBQUEsUUFBbkNDLE9BQW1DLHVFQUF6QixFQUF5QjtBQUFBLFFBQXJCQyxTQUFxQix1RUFBVCxJQUFTOztBQUMxRCxRQUFNQyxLQUFLUixPQUFYO0FBQ0EsUUFBTVMs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IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbmltcG9ydCB1dWlkdjEgZnJvbSAndXVpZC92MSc7XG5cbmV4cG9ydCBjb25zdCBUWVBFUyA9IHtcbiAgUExBVEZPUk1fQUxFUlRTX1NIT1c6ICdQTEFURk9STV9BTEVSVFNfU0hPVycsXG4gIFBMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJUOiAnUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxFUlQnLFxuICBQTEFURk9STV9BTEVSVFNfRElTTUlTU19BTEw6ICdQTEFURk9STV9BTEVSVFNfRElTTUlTU19BTEwnLFxufTtcblxuY29uc3QgREVGQVVMVF9USU1FT1VUID0gMzAwMDtcblxuY29uc3QgZ2V0SWQgPSAoKSA9PiB1dWlkdjEoKTtcblxuY2xhc3MgT0NBbGVydENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RvcmUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBzZXRTdG9yZSA9IChzdG9yZSkgPT4ge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgfTtcblxuICBhbGVydFN1Y2Nlc3MgPSAobWVzc2FnZSwgb3B0aW9ucyA9IHt9LCBvbkRpc21pc3MgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZCgpO1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCB7IHRpbWVPdXQ6IERFRkFVTFRfVElNRU9VVCB9LCBvcHRpb25zKTtcbiAgICB0aGlzLnNob3dBbGVydChpZCwgJ3N1Y2Nlc3MnLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBhbGVydEluZm8gPSAobWVzc2FnZSwgb3B0aW9ucyA9IHt9LCBvbkRpc21pc3MgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZCgpO1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCB7IHRpbWVPdXQ6IERFRkFVTFRfVElNRU9VVCB9LCBvcHRpb25zKTtcbiAgICB0aGlzLnNob3dBbGVydChpZCwgJ2luZm8nLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBhbGVydFdhcm5pbmcgPSAobWVzc2FnZSwgb3B0aW9ucyA9IHt9LCBvbkRpc21pc3MgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZCgpO1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICB0aGlzLnNob3dBbGVydChpZCwgJ3dhcm5pbmcnLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBhbGVydEVycm9yID0gKG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSwgb25EaXNtaXNzID0gbnVsbCkgPT4ge1xuICAgIGNvbnN0IGlkID0gZ2V0SWQoKTtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgdGhpcy5zaG93QWxlcnQoaWQsICdkYW5nZXInLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBjbG9zZUFsZXJ0ID0gKGlkKSA9PiB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7XG4gICAgICBpZCxcbiAgICAgIHR5cGU6IFRZUEVTLlBMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJULFxuICAgIH0pO1xuICB9O1xuXG4gIGNsb3NlQWxlcnRzID0gKCkgPT4ge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogVFlQRVMuUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxMLFxuICAgIH0pO1xuICB9O1xuXG4gIHNob3dBbGVydCA9IChpZCwgdHlwZSwgbWVzc2FnZSwgb3B0aW9ucywgb25EaXNtaXNzID0gbnVsbCkgPT4ge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgaWQsXG4gICAgICBtZXNzYWdlLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgdHlwZTogVFlQRVMuUExBVEZPUk1fQUxFUlRTX1NIT1csXG4gICAgICBhbGVydFR5cGU6IHR5cGUsXG4gICAgfSk7XG4gICAgaWYgKG9wdGlvbnMudGltZU91dCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmNsb3NlQWxlcnQoaWQpLCBvcHRpb25zLnRpbWVPdXQpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IE9DQWxlcnQgPSBuZXcgT0NBbGVydENvbXBvbmVudCgpO1xuIl19