function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable class-methods-use-this */
import uuidv1 from 'uuid/v1';

export var TYPES = {
  PLATFORM_ALERTS_SHOW: 'PLATFORM_ALERTS_SHOW',
  PLATFORM_ALERTS_DISMISS_ALERT: 'PLATFORM_ALERTS_DISMISS_ALERT',
  PLATFORM_ALERTS_DISMISS_ALL: 'PLATFORM_ALERTS_DISMISS_ALL'
};

var DEFAULT_TIMEOUT = 3000;

var getId = function getId() {
  return uuidv1();
};

var OCAlertComponent = function OCAlertComponent() {
  var _this = this;

  _classCallCheck(this, OCAlertComponent);

  this.setStore = function (store) {
    _this.store = store;
  };

  this.alertSuccess = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, { timeOut: DEFAULT_TIMEOUT }, options);
    _this.showAlert(id, 'success', message, opts, onDismiss);
    return id;
  };

  this.alertInfo = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, { timeOut: DEFAULT_TIMEOUT }, options);
    _this.showAlert(id, 'info', message, opts, onDismiss);
    return id;
  };

  this.alertWarning = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, options);
    _this.showAlert(id, 'warning', message, opts, onDismiss);
    return id;
  };

  this.alertError = function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onDismiss = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var id = getId();
    var opts = Object.assign({}, options);
    _this.showAlert(id, 'danger', message, opts, onDismiss);
    return id;
  };

  this.closeAlert = function (id) {
    _this.store.dispatch({
      id: id,
      type: TYPES.PLATFORM_ALERTS_DISMISS_ALERT
    });
  };

  this.closeAlerts = function () {
    _this.store.dispatch({
      type: TYPES.PLATFORM_ALERTS_DISMISS_ALL
    });
  };

  this.showAlert = function (id, type, message, options) {
    var onDismiss = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _this.store.dispatch({
      id: id,
      message: message,
      onDismiss: onDismiss,
      type: TYPES.PLATFORM_ALERTS_SHOW,
      alertType: type
    });
    if (options.timeOut) {
      setTimeout(function () {
        return _this.closeAlert(id);
      }, options.timeOut);
    }
  };

  this.store = undefined;
};

export var OCAlert = new OCAlertComponent();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbGVydHMvYWxlcnRzLmFjdGlvbnMuanMiXSwibmFtZXMiOlsidXVpZHYxIiwiVFlQRVMiLCJQTEFURk9STV9BTEVSVFNfU0hPVyIsIlBMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJUIiwiUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxMIiwiREVGQVVMVF9USU1FT1VUIiwiZ2V0SWQiLCJPQ0FsZXJ0Q29tcG9uZW50Iiwic2V0U3RvcmUiLCJzdG9yZSIsImFsZXJ0U3VjY2VzcyIsIm1lc3NhZ2UiLCJvcHRpb25zIiwib25EaXNtaXNzIiwiaWQiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGltZU91dCIsInNob3dBbGVydCIsImFsZXJ0SW5mbyIsImFsZXJ0V2FybmluZyIsImFsZXJ0RXJyb3IiLCJjbG9zZUFsZXJ0IiwiZGlzcGF0Y2giLCJ0eXBlIiwiY2xvc2VBbGVydHMiLCJhbGVydFR5cGUiLCJzZXRUaW1lb3V0IiwidW5kZWZpbmVkIiwiT0NBbGVydCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLE9BQU9BLE1BQVAsTUFBbUIsU0FBbkI7O0FBRUEsT0FBTyxJQUFNQyxRQUFRO0FBQ25CQyx3QkFBc0Isc0JBREg7QUFFbkJDLGlDQUErQiwrQkFGWjtBQUduQkMsK0JBQTZCO0FBSFYsQ0FBZDs7QUFNUCxJQUFNQyxrQkFBa0IsSUFBeEI7O0FBRUEsSUFBTUMsUUFBUSxTQUFSQSxLQUFRO0FBQUEsU0FBTU4sUUFBTjtBQUFBLENBQWQ7O0lBRU1PLGdCLEdBQ0osNEJBQWM7QUFBQTs7QUFBQTs7QUFBQSxPQUlkQyxRQUpjLEdBSUgsVUFBQ0MsS0FBRCxFQUFXO0FBQ3BCLFVBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNELEdBTmE7O0FBQUEsT0FRZEMsWUFSYyxHQVFDLFVBQUNDLE9BQUQsRUFBNkM7QUFBQSxRQUFuQ0MsT0FBbUMsdUVBQXpCLEVBQXlCO0FBQUEsUUFBckJDLFNBQXFCLHVFQUFULElBQVM7O0FBQzFELFFB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ZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbmltcG9ydCB1dWlkdjEgZnJvbSAndXVpZC92MSc7XG5cbmV4cG9ydCBjb25zdCBUWVBFUyA9IHtcbiAgUExBVEZPUk1fQUxFUlRTX1NIT1c6ICdQTEFURk9STV9BTEVSVFNfU0hPVycsXG4gIFBMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJUOiAnUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxFUlQnLFxuICBQTEFURk9STV9BTEVSVFNfRElTTUlTU19BTEw6ICdQTEFURk9STV9BTEVSVFNfRElTTUlTU19BTEwnLFxufTtcblxuY29uc3QgREVGQVVMVF9USU1FT1VUID0gMzAwMDtcblxuY29uc3QgZ2V0SWQgPSAoKSA9PiB1dWlkdjEoKTtcblxuY2xhc3MgT0NBbGVydENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RvcmUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBzZXRTdG9yZSA9IChzdG9yZSkgPT4ge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgfTtcblxuICBhbGVydFN1Y2Nlc3MgPSAobWVzc2FnZSwgb3B0aW9ucyA9IHt9LCBvbkRpc21pc3MgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZCgpO1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCB7IHRpbWVPdXQ6IERFRkFVTFRfVElNRU9VVCB9LCBvcHRpb25zKTtcbiAgICB0aGlzLnNob3dBbGVydChpZCwgJ3N1Y2Nlc3MnLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBhbGVydEluZm8gPSAobWVzc2FnZSwgb3B0aW9ucyA9IHt9LCBvbkRpc21pc3MgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZCgpO1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCB7IHRpbWVPdXQ6IERFRkFVTFRfVElNRU9VVCB9LCBvcHRpb25zKTtcbiAgICB0aGlzLnNob3dBbGVydChpZCwgJ2luZm8nLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBhbGVydFdhcm5pbmcgPSAobWVzc2FnZSwgb3B0aW9ucyA9IHt9LCBvbkRpc21pc3MgPSBudWxsKSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZCgpO1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICB0aGlzLnNob3dBbGVydChpZCwgJ3dhcm5pbmcnLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBhbGVydEVycm9yID0gKG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSwgb25EaXNtaXNzID0gbnVsbCkgPT4ge1xuICAgIGNvbnN0IGlkID0gZ2V0SWQoKTtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgdGhpcy5zaG93QWxlcnQoaWQsICdkYW5nZXInLCBtZXNzYWdlLCBvcHRzLCBvbkRpc21pc3MpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICBjbG9zZUFsZXJ0ID0gKGlkKSA9PiB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaCh7XG4gICAgICBpZCxcbiAgICAgIHR5cGU6IFRZUEVTLlBMQVRGT1JNX0FMRVJUU19ESVNNSVNTX0FMRVJULFxuICAgIH0pO1xuICB9O1xuXG4gIGNsb3NlQWxlcnRzID0gKCkgPT4ge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogVFlQRVMuUExBVEZPUk1fQUxFUlRTX0RJU01JU1NfQUxMLFxuICAgIH0pO1xuICB9O1xuXG4gIHNob3dBbGVydCA9IChpZCwgdHlwZSwgbWVzc2FnZSwgb3B0aW9ucywgb25EaXNtaXNzID0gbnVsbCkgPT4ge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgaWQsXG4gICAgICBtZXNzYWdlLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgdHlwZTogVFlQRVMuUExBVEZPUk1fQUxFUlRTX1NIT1csXG4gICAgICBhbGVydFR5cGU6IHR5cGUsXG4gICAgfSk7XG4gICAgaWYgKG9wdGlvbnMudGltZU91dCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmNsb3NlQWxlcnQoaWQpLCBvcHRpb25zLnRpbWVPdXQpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IE9DQWxlcnQgPSBuZXcgT0NBbGVydENvbXBvbmVudCgpO1xuIl19